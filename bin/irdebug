#!/usr/bin/env ruby

$LOAD_PATH.unshift(File.expand_path('../../lib', __FILE__))
require 'ir/controller'
require 'ir/io_adapter/arduino'
require 'rainbow/ext/string'
require 'diff/lcs'

IR::Command.require_all

def run
  case ARGV.first
  when 'io'
    debug_io
  when 'pulse'
    debug_pulse
  when 'data'
    debug_data
  when 'command'
    debug_command
  when 'data_bits'
    debug_data_bits
  else
    warn 'Specify debug mode: io, pulse, data, command or data_bits.'
  end
end

def debug_io
  controller.io_adapter.io.each_line do |line|
    print line
  end
end

def debug_pulse
  controller.each_received_pulse do |pulse|
    pulse.each do |signal|
      puts [signal.on? ? 1 : 0, signal.duration].join("\t")
    end

    puts '=' * 80
  end
end

def debug_data
  previous = nil

  controller.each_received_data do |data|
    current = data.inspect
    puts highlight_static_diff(current, previous)
    previous = current
  end
end

def debug_command
  previous = nil

  controller.each_received_command do |command|
    current = command.inspect
    puts highlight_smart_diff(current, previous)
    previous = current
  end
end

def debug_data_bits
  previous = nil

  controller.each_received_command do |command|
    current = command.data_bits.pretty
    puts highlight_static_diff(current, previous)
    previous = current
  end
end

def controller
  @controller ||= begin
    io_adapter = IR::IOAdapter::Arduino.from_found_device
    IR::Controller.new(io_adapter)
  end
end

def highlight_static_diff(subject, other)
  return subject unless other

  char_pairs = subject.each_char.zip(other.each_char)

  positions = char_pairs.map.with_index do |(subject_char, other_char), index|
    subject_char == other_char ? nil : index
  end.compact

  highlight_positions(subject, positions)
end

def highlight_smart_diff(subject, other)
  return subject unless other

  diffs = Diff::LCS.diff(other, subject)

  positions = diffs.map do |diff|
    diff.map { |change| change.position }
  end.flatten.uniq

  highlight_positions(subject, positions)
end

def highlight_positions(string, positions)
  highlighted_string = ''

  string.each_char.with_index do |char, index|
    char = char.color(:red) if positions.include?(index)
    highlighted_string << char
  end

  highlighted_string
end

run
